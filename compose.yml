services:
  sr-api:
    container_name: sr-api
    restart: unless-stopped
    image: dzailz/sr-api:test-ws
    ports:
      - "8787:8080"
    env_file:
      - /var/sr-api/.env.local
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "30"
    depends_on:
      otel-collector:
        condition: service_started
      promtail:
        condition: service_started
    networks:
      telemetry:

  otel-collector:
    container_name: otel-collector
    restart: unless-stopped
    image: otel/opentelemetry-collector:latest
    volumes:
      - /var/telemetry/otel-collector-config.yaml:/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver port
      - "4318:4318" # OTLP HTTP receiver port
      - "8889:8889" # Prometheus exporter port
    command: ["--config=/otel-collector-config.yaml"]
    depends_on:
      jaeger:
        condition: service_started
    networks:
      telemetry:

  promtail:
    container_name: promtail
    restart: unless-stopped
    image: grafana/promtail:latest
    volumes:
      - /var/log/docker/containers:/var/log/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/telemetry/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_started
    networks:
      telemetry:

  loki:
    container_name: loki
    restart: unless-stopped
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
      - loki-wal:/loki/wal
      - /var/telemetry/loki-config.yml:/mnt/config/loki-config.yml
    command: -config.file=/mnt/config/loki-config.yml
    networks:
      telemetry:

  jaeger:
    container_name: jaeger
    restart: unless-stopped
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Jaeger Collector HTTP port
      - "14250:14250" # Jaeger Collector gRPC port
    volumes:
      - jaeger-data:/badger
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: badger
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
      BADGER_EPHEMERAL: "false"
    user: "0"
    networks:
      telemetry:

  prometheus:
    container_name: prometheus
    restart: unless-stopped
    image: prom/prometheus:latest
    volumes:
      - /var/telemetry/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus  # Define a volume for Prometheus data storage
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    networks:
      telemetry:


  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - /var/telemetry/.env.grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - /var/telemetry/grafana-config.ini:/etc/grafana/grafana.ini
    depends_on:
      postgres-grafana:
       condition: service_healthy
    networks:
      grafana_db:
      telemetry:

  postgres-grafana:
    image: postgres:latest
    container_name: postgres-grafana
    restart: unless-stopped
    env_file:
      - /var/telemetry/.env.grafana
    volumes:
      - grafana-db:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      grafana_db:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: "zookeeper"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-network

  kafka:
    container_name: "kafka"
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://192.168.111.127:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network
      - telemetry
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:29092"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "
      echo Waiting for Kafka to be ready...
      cub kafka-ready -b kafka:9092 1 20 &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic send-data &&
      kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic recognition
      "
    networks:
      - kafka-network


volumes:
  grafana-db: {}
  grafana-storage: {}
  loki-data: {}
  loki-wal: {}
  influxdb-data: {}
  jaeger-data: {}
  prometheus-data: {}

networks:
  grafana_db:
    driver: bridge
  telemetry:
  kafka-network:
    driver: bridge